from PIL import Image
import random
from xcrypto import num_to_str


def get_bit(location, pixels):
    x, y, channel = location
    b = list(pixels[x, y])[channel] & 0b00000001
    return b


def get_byte(locations, pixels):
    by = 0
    for i, location in enumerate(locations):
        b = get_bit(location, pixels)
        by += (2**(7-i)) * b

    return by.to_bytes(1, "little")


if __name__ == '__main__':
    seed = b"\xed\xfe\xcb\x10"
    size = 0x22
    random.seed(seed)

    image = Image.open("out.png")
    image = image.convert("RGB")
    pixels = image.load()
    available = image.width * image.height * 3

    valid_spots = []
    for channel in range(3):
        for y in range(image.height):
            for x in range(image.width):
                valid_spots.append((x, y, channel))

    metadata = b"\x90\xbfhttps://github.com/evil-steganography/evil-stego-1" + seed + b"\x22\x00\x00\x00"

    c = 0
    for byte in metadata:
        c += 8

    locations = random.sample(valid_spots[c:], size * 8 + 1)
    c = 0

    # print(locations)

    flag = b""
    for _ in range(size):
        b = get_byte(locations[c:c+8], pixels)
        flag += b
        c += 8

    print(flag)